[{"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\index.tsx":"1","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\App.tsx":"2","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\store\\index.ts":"3","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\store\\ducks\\rootReducer.ts":"4","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\store\\ducks\\rootSaga.ts":"5","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\store\\ducks\\repositories\\actions.ts":"6","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\store\\ducks\\repositories\\types.ts":"7","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\store\\ducks\\repositories\\sagas.ts":"8","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\store\\ducks\\repositories\\index.ts":"9","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\services\\api.ts":"10","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\graphQL\\client.ts":"11","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\layouts\\DashBoardPageLayout.tsx":"12","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\pages\\UserPage.tsx":"13","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\components\\common\\index.ts":"14","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\components\\common\\Content\\index.ts":"15","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\components\\common\\PageTitle\\index.ts":"16","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\components\\common\\PageContent\\index.ts":"17","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\components\\common\\Content\\Content.tsx":"18","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\components\\common\\PageTitle\\PageTitle.tsx":"19","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\components\\common\\PageContent\\PageContent.tsx":"20","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\pages\\PostPage.tsx":"21","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\pages\\PetPage.tsx":"22","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\pages\\VaccineList.tsx":"23","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\pages\\WikiList.tsx":"24"},{"size":177,"mtime":1611910085068,"results":"25","hashOfConfig":"26"},{"size":2005,"mtime":1611985309803,"results":"27","hashOfConfig":"26"},{"size":539,"mtime":1611972955938,"results":"28","hashOfConfig":"26"},{"size":140,"mtime":1611859493781,"results":"29","hashOfConfig":"26"},{"size":613,"mtime":1611985676688,"results":"30","hashOfConfig":"26"},{"size":949,"mtime":1611989676125,"results":"31","hashOfConfig":"26"},{"size":1169,"mtime":1611988808632,"results":"32","hashOfConfig":"26"},{"size":1691,"mtime":1611989612983,"results":"33","hashOfConfig":"26"},{"size":1502,"mtime":1611989663964,"results":"34","hashOfConfig":"26"},{"size":2027,"mtime":1611988883708,"results":"35","hashOfConfig":"26"},{"size":449,"mtime":1611981812452,"results":"36","hashOfConfig":"26"},{"size":2550,"mtime":1611985327870,"results":"37","hashOfConfig":"26"},{"size":2579,"mtime":1611928655786,"results":"38","hashOfConfig":"26"},{"size":153,"mtime":1606158764000,"results":"39","hashOfConfig":"26"},{"size":56,"mtime":1606158764000,"results":"40","hashOfConfig":"26"},{"size":62,"mtime":1606158764000,"results":"41","hashOfConfig":"26"},{"size":68,"mtime":1606158764000,"results":"42","hashOfConfig":"26"},{"size":381,"mtime":1606158764000,"results":"43","hashOfConfig":"26"},{"size":420,"mtime":1606158764000,"results":"44","hashOfConfig":"26"},{"size":878,"mtime":1611916002553,"results":"45","hashOfConfig":"26"},{"size":3158,"mtime":1611990259267,"results":"46","hashOfConfig":"26"},{"size":2654,"mtime":1611984488182,"results":"47","hashOfConfig":"26"},{"size":4001,"mtime":1611988599623,"results":"48","hashOfConfig":"26"},{"size":4152,"mtime":1611989865134,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1azkc50",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"52"},"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\index.tsx",[],["108","109"],"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\App.tsx",[],"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\store\\index.ts",[],"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\store\\ducks\\rootReducer.ts",[],"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\store\\ducks\\rootSaga.ts",[],"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\store\\ducks\\repositories\\actions.ts",[],"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\store\\ducks\\repositories\\types.ts",[],"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\store\\ducks\\repositories\\sagas.ts",["110","111"],"import { call, put, fork, select } from 'redux-saga/effects';\nimport {api, getTestGQL, getUserGQL, getAllPet, getAllVaccine,getAllWiki, deleteVaccine} from '../../../services/api';\n\nimport { loadSuccess, loadFailure, loadVaccineSuccess, loadwikiSuccess } from './actions';\nimport store from \"../../index\"\n\nconst data = (store:any) => store.repositories.idDelete;\n\nexport function* load() {\n  try {\n    // const response = yield call(api.get, 'users/diego3g/repos');\n    \n    const response =  yield call(getUserGQL);\n    // console.log(\"hello\");\n    \n    // console.log(typeof(response));\n    yield put(loadSuccess(response));\n  } catch (err) {\n    yield put(loadFailure());\n  }\n}\n\nexport function* loadPost() {\n  try {    \n    const response =  yield call(getTestGQL);    \n    yield put(loadSuccess(response));\n  } catch (err) {\n    yield put(loadFailure());\n  }\n}\n\nexport function* loadPet(){\n  try {        \n    const response =  yield call(getAllPet);\n    yield put(loadSuccess(response));\n  } catch (err) {\n    yield put(loadFailure());\n  }\n}\n\nexport function* loadVaccine(){\n  try {      \n      \n    const response =  yield call(getAllVaccine);\n    \n    yield put(loadVaccineSuccess(response));\n  } catch (err) {\n    yield put(loadFailure());\n  }\n}\n\n\nexport function* takeDelete(){\n  try {      \n    //Get store\n    const id = yield select(data);\n    // fork\n    yield fork(deleteVaccine,id);\n  } catch (err) {\n    // something wrong\n  }\n}\n\nexport function* loadwiki(){\n  try {      \n      \n    const response =  yield call(getAllWiki);\n    console.log(\"im in respond\",response);\n    \n    yield put(loadwikiSuccess(response));\n  } catch (err) {\n    yield put(loadFailure());\n  }\n}\n\n\n\n\n","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\store\\ducks\\repositories\\index.ts",[],"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\services\\api.ts",["112"],"import axios from 'axios';\nimport {gql} from '@apollo/client'\nimport graphQLClient from '../graphQL/client';\nimport _ from 'lodash';\n\nexport const api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n\nexport const getTestGQL = async ()=>{\n  return await graphQLClient.request(\ngql`\n    query {\n      getAllPost(q: {\n        limit: 10\n      }) {\n        data {\n    id\n    content\n    images\n    videos\n    commentIds\n    like\n    tags\n    petTags\n    share\n        }\n      }\n    }\n    `\n  ).then((data)=>{\n    return data.getAllPost.data\n  });\n}\n\nexport const getUserGQL = async ()=>{\n  return await graphQLClient.request(\ngql`\nquery {\n  getAllUser(q: {\n    filter: {\n      role: \"EDITOR\"\n    }\n  }) {\n    data {\n\t\t\tid\n\t\t\tname\n      email\n      phone\n      createdAt\n      follows\n    }\n  }\n}`).then((data)=>{\n    return data.getAllUser.data\n  });\n}\n\n\nexport const getAllPet = async ()=>{\n  return await graphQLClient.request(\ngql`\nquery{\n  getAllPet(q:{}){\n    data{\n      id\n      name\n      birthday\n      \n      race{\n        name\n      }\n      \n      avatar\n      \n      user{name}\n    }\n  }\n}\n`).then((data)=>{  \n    return data.getAllPet.data\n  });\n}\n\nexport const getAllVaccine = async ()=>{\n  return await graphQLClient.request(\ngql`\nquery{\n  getAllVaccineType(q:{}){\n    data{\n      id\n      name\n      raceType\n      createdAt\n      updatedAt\n    }\n  }\n}\n`).then((data)=>{  \n    return data.getAllVaccineType.data\n  });\n}\n\nexport const deleteVaccine = async(id: string)=>{\n  return await graphQLClient.request(\n    gql`\n    mutation{\n      deleteOneVaccineType(\n        id: \"${id}\"\n        ){\n          id\n        }\n    }\n    `).then((data)=>{  \n      // console.log(\"that is data\");\n      });\n}\nexport const getAllWiki = async ()=>{\n  return await graphQLClient.request(\ngql`\nquery{\n  getAllWikiCategory(q:{}){\n    data{\n      id\n      title\n      image\n      typeOfwiki{\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}\n`).then((data)=>{  \n    return data.getAllWikiCategory.data\n  });\n}\n\n\n","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\graphQL\\client.ts",[],"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\layouts\\DashBoardPageLayout.tsx",["113","114"],"import React from 'react';\r\n\r\n\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { Layout, Menu, Breadcrumb } from 'antd';\r\nimport { UserOutlined, MessageOutlined , NotificationOutlined, CrownFilled } from '@ant-design/icons';\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\n\r\ntype CommonLayoutProps = {\r\n    children: React.ReactNode\r\n}\r\n\r\nconst  DashboardPageLayout: React.FunctionComponent<CommonLayoutProps> = ({ children }) => { \r\n    \r\n  \r\n  return (\r\n        <DashboardLayout >\r\n      <Layout style={{fontSize: 16 }}>\r\n    <Header className=\"header\">\r\n      <img className=\"logo\" src='petland.png' style={{height:60, padding: '0 50px'}}/>\r\n      <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n    \r\n      </Menu>\r\n    </Header>\r\n    <Content style={{ padding: '0 50px' }}>\r\n      <Breadcrumb style={{ margin: '16px 0'}}>\r\n        <Breadcrumb.Item >\r\n        <h1 style={{padding: '0 30px', fontSize: 30}}>Trang chủ</h1>\r\n        </Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <Layout className=\"site-layout-background\" style={{ padding: '0 0' }}>\r\n        <Sider className=\"site-layout-background\" width={200}>\r\n          <Menu\r\n            mode=\"inline\"\r\n            defaultSelectedKeys={['1']}\r\n            defaultOpenKeys={['sub1']}\r\n            style={{ height: '100%' }}\r\n          >\r\n            <Menu.Item key=\"sub1\" icon={<UserOutlined />} title=\"Người dùng\"\r\n            >\r\n              <Link to=\"/user\">Người dùng</Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"5\" icon={<MessageOutlined/>}>\r\n              <Link to=\"/post\">Bài viết</Link>\r\n                </Menu.Item>\r\n            <SubMenu key=\"PET\" icon={<CrownFilled />} title=\"Thú cưng\">\r\n              <Menu.Item key=\"9\"> <Link to=\"/pet\">List thú cưng</Link></Menu.Item>\r\n              <Menu.Item key=\"10\"><Link to=\"/vaccine\">Vắc-xin</Link></Menu.Item>\r\n            </SubMenu>\r\n            <Menu.Item key=\"wiki\" icon={<UserOutlined />} title=\"Bài viết WIKI\"\r\n            >\r\n              <Link to=\"/wiki\">Bài viết WIKI</Link>\r\n            </Menu.Item>\r\n          </Menu>\r\n        </Sider>\r\n        <div style={{ padding: '0 24px', minHeight: 280 }}>\r\n        {children}\r\n        </div>\r\n      </Layout>\r\n    </Content>\r\n    <Footer style={{ textAlign: 'center' }}>PetLand@2021</Footer>\r\n  </Layout>\r\n  </DashboardLayout>\r\n    );\r\n}\r\n\r\nconst DashboardLayout = styled(Layout)`\r\n  min-height: 100vh;\r\n`\r\n\r\nexport default DashboardPageLayout","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\pages\\UserPage.tsx",["115","116","117","118","119","120"],"\r\nimport { useEffect } from 'react'\r\n\r\nimport DashboardPageLayout from \"../layouts/DashBoardPageLayout\"\r\nimport {  Content, PageContent } from '../components/common'\r\nimport { EditOutlined, LoadingOutlined } from '@ant-design/icons'\r\nimport { Repository } from \"../store/ducks/repositories/types\"\r\nimport { Breadcrumb, Modal, Table, Tag, Button } from 'antd'\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch } from 'redux';\r\nimport { ApplicationState } from '../store';\r\nimport * as RepositoriesActions from '../store/ducks/repositories/actions';\r\n\r\n\r\ninterface StateProps {\r\n  repositories: Repository[]\r\n}\r\n\r\ninterface DispatchProps {\r\n  loadRequest(): void\r\n}\r\ntype Props = StateProps & DispatchProps\r\n\r\nconst UserPage: React.FunctionComponent<Props> = props => {\r\n  // Component didmount => fetch API \r\n  useEffect(() => {\r\n    const {loadRequest} = props;\r\n    loadRequest();\r\n  }, [])\r\n  const { repositories } = props;\r\n\r\n  const columns = [\r\n    {\r\n      title: 'ID',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n    },\r\n    {\r\n      title: 'Name',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    },\r\n    {\r\n      title: 'Email',\r\n      dataIndex: 'email',\r\n      key: 'email',\r\n    },\r\n    {\r\n      title: 'Phone',\r\n      dataIndex: 'phone',\r\n      key: 'phone',\r\n    },\r\n    {\r\n      title: 'Ngày đăng kí tài khoản',\r\n      dataIndex: 'createdAt',\r\n      key: 'createdAt',\r\n    },\r\n    {\r\n      title: 'Số người theo dỗi',\r\n      dataIndex: 'follows',\r\n      key: 'follows',\r\n      render: (follows: string[])=>{return follows?follows.length:0}\r\n    }\r\n  ]\r\n\r\n\r\n\r\n   /**\r\n   * Update this code to show loading spinner when data is being fetched from\r\n   * API\r\n   */\r\n  const loading = false\r\n  \r\n    return (\r\n      <DashboardPageLayout>\r\n        <Content>\r\n        <div className=\"site-layout-background\" style={{}}>\r\n        <PageContent title=\"Danh sách người dùng\" titleDivider>\r\n          {loading && (\r\n            <div style={{ textAlign: 'center' }}>\r\n              <LoadingOutlined />{' '}\r\n            </div>\r\n          )}\r\n          {!loading && <Table dataSource={repositories} columns={columns} />}\r\n        </PageContent>\r\n        </div>\r\n        </Content>\r\n      </DashboardPageLayout>\r\n    )\r\n  }\r\n\r\n  const mapStateToProps = (state: ApplicationState) => ({\r\n    repositories: state.repositories.data,\r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(RepositoriesActions, dispatch);\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(UserPage);\r\n","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\components\\common\\index.ts",[],"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\components\\common\\Content\\index.ts",[],"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\components\\common\\PageTitle\\index.ts",[],"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\components\\common\\PageContent\\index.ts",[],"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\components\\common\\Content\\Content.tsx",[],"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\components\\common\\PageTitle\\PageTitle.tsx",[],"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\components\\common\\PageContent\\PageContent.tsx",[],["121","122"],"C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\pages\\PostPage.tsx",["123","124","125","126","127","128","129"],"\r\nimport { useEffect } from 'react'\r\n\r\nimport DashboardPageLayout from \"../layouts/DashBoardPageLayout\"\r\nimport {  Content, PageContent } from '../components/common'\r\nimport { EditOutlined, LoadingOutlined } from '@ant-design/icons'\r\nimport { Repository } from \"../store/ducks/repositories/types\"\r\nimport { Breadcrumb, Modal, Table, Tag, Button } from 'antd'\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch } from 'redux';\r\nimport { ApplicationState } from '../store';\r\nimport * as RepositoriesActions from '../store/ducks/repositories/actions';\r\n\r\n\r\ninterface StateProps {\r\n  repositories: Repository[]\r\n}\r\n\r\ninterface DispatchProps {\r\n    loadPost(): void\r\n}\r\ntype Props = StateProps & DispatchProps\r\n\r\nconst PostPage: React.FunctionComponent<Props> = props => {\r\n  // Component didmount => fetch API \r\n  useEffect(() => {\r\n    const {loadPost} = props;\r\n    loadPost();\r\n  }, [])\r\n  const { repositories } = props;\r\n\r\n  const columns = [\r\n    {\r\n      title: 'ID',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n    },\r\n    {\r\n      title: 'Nội dung',\r\n      dataIndex: 'content',\r\n      key: 'content',\r\n    },\r\n    {\r\n      title: 'Hình ảnh',\r\n      dataIndex: 'images',\r\n      key: 'images',\r\n      render: (images: string[]): JSX.Element[] => {\r\n        return images&&images.map((c: string) => {\r\n          return (\r\n            <img src={c} key={c} style={{width: 70, height: 70}}>\r\n            </img>\r\n          )\r\n        })\r\n      },\r\n    },\r\n    {\r\n      title: 'Video',\r\n      dataIndex: 'videos',\r\n      key: 'videos',\r\n      render: (videos: string[]): JSX.Element[] => {\r\n        return videos&&videos.map((c: string) => {\r\n          return (\r\n            <video key={c} autoPlay={false} style={{width: 140, height: 140}}>\r\n                <source src={c} />\r\n        </video>\r\n          )\r\n        })\r\n      },\r\n    },\r\n    {\r\n      title: 'Ngày đăng bài',\r\n      dataIndex: 'createdAt',\r\n      key: 'createdAt',\r\n    },\r\n    {\r\n        title: 'Lượt thích',\r\n        dataIndex: 'like',\r\n        key: 'like',\r\n      },\r\n      {\r\n        title: 'Lượt chia sẻ',\r\n        dataIndex: 'share',\r\n        key: 'share',\r\n      },\r\n   \r\n  ]\r\n  \r\n\r\n\r\n   /**\r\n   * Update this code to show loading spinner when data is being fetched from\r\n   * API\r\n   */\r\n  const loading = false\r\n  \r\n    return (\r\n      <DashboardPageLayout>\r\n        <Content>\r\n        <div className=\"site-layout-background\" style={{}}>\r\n        <PageContent title=\"Danh sách bài viết\" titleDivider>\r\n        {loading && (\r\n            <div style={{ textAlign: 'center' }}>\r\n              <LoadingOutlined />{' '}\r\n            </div>\r\n          )}\r\n          {!loading && <Table dataSource={repositories} columns={columns} />}\r\n        </PageContent>\r\n        </div>\r\n        </Content>\r\n      </DashboardPageLayout>\r\n    )\r\n  }\r\n\r\n  const mapStateToProps = (state: ApplicationState) => ({\r\n    repositories: state.repositories.data,\r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(RepositoriesActions, dispatch);\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(PostPage);\r\n","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\pages\\PetPage.tsx",["130","131","132","133","134","135","136"],"\r\nimport { useEffect } from 'react'\r\n\r\nimport DashboardPageLayout from \"../layouts/DashBoardPageLayout\"\r\nimport {  Content, PageContent } from '../components/common'\r\nimport { EditOutlined, LoadingOutlined } from '@ant-design/icons'\r\nimport { Repository } from \"../store/ducks/repositories/types\"\r\nimport { Breadcrumb, Modal, Table, Tag, Button } from 'antd'\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch } from 'redux';\r\nimport { ApplicationState } from '../store';\r\nimport * as RepositoriesActions from '../store/ducks/repositories/actions';\r\n\r\n\r\ninterface StateProps {\r\n  repositories: Repository[]\r\n}\r\n\r\ninterface DispatchProps {\r\n    loadPet(): void\r\n}\r\ntype Props = StateProps & DispatchProps\r\n\r\nconst PetPage: React.FunctionComponent<Props> = props => {\r\n  // Component didmount => fetch API \r\n  useEffect(() => {\r\n    const {loadPet} = props;\r\n    loadPet();\r\n  }, []);\r\n  const { repositories } = props;\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Tên',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    },\r\n    {\r\n      title: 'Sinh nhật',\r\n      dataIndex: 'birthday',\r\n      key: 'birthday',\r\n    },\r\n    {\r\n      title: 'Giống',\r\n      dataIndex: 'race',\r\n      key: 'race',\r\n      render: (race: any)=>{return race?race.name:''}\r\n\r\n     \r\n    },\r\n    {\r\n        title: '\"Sen\"',\r\n        dataIndex: 'user.name',\r\n        key: 'user.nam',\r\n      },\r\n      {\r\n        title: 'Avatar',\r\n        dataIndex: 'avatar',\r\n        key: 'avatar',\r\n        render: (image: string) => {\r\n            return (\r\n              <img src={image} key={image} style={{width: 70, height: 70}}>\r\n              </img>\r\n            )\r\n        },\r\n      },\r\n   \r\n  ]  \r\n\r\n   /**\r\n   * Update this code to show loading spinner when data is being fetched from\r\n   * API\r\n   */\r\n  const loading = false\r\n  \r\n    return (\r\n      <DashboardPageLayout>\r\n        <Content>\r\n        <div className=\"site-layout-background\" style={{}}>\r\n        <PageContent title=\"Danh sách thú cưng\" titleDivider>\r\n        {loading && (\r\n            <div style={{ textAlign: 'center' }}>\r\n              <LoadingOutlined />{' '}\r\n            </div>\r\n          )}\r\n          {!loading && <Table dataSource={repositories} columns={columns} />}\r\n        </PageContent>\r\n        </div>\r\n        </Content>\r\n      </DashboardPageLayout>\r\n    )\r\n  }\r\n\r\n  const mapStateToProps = (state: ApplicationState) => ({\r\n    repositories: state.repositories.data,\r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(RepositoriesActions, dispatch);\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(PetPage);\r\n","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\pages\\VaccineList.tsx",["137","138","139","140","141"],"\r\nimport { useEffect, useState } from 'react'\r\n\r\nimport DashboardPageLayout from \"../layouts/DashBoardPageLayout\"\r\nimport {  Content, PageContent } from '../components/common'\r\nimport { EditOutlined, LoadingOutlined } from '@ant-design/icons'\r\nimport { Vaccine } from \"../store/ducks/repositories/types\"\r\nimport { Breadcrumb, Modal, Table, Tag, Button } from 'antd'\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch } from 'redux';\r\nimport { ApplicationState } from '../store';\r\nimport * as RepositoriesActions from '../store/ducks/repositories/actions';\r\nimport React from 'react'\r\n\r\n\r\ninterface StateProps {\r\n  vaccine: Vaccine[]\r\n  \r\n}\r\n\r\ninterface DispatchProps {\r\n    loadVaccine(): void\r\n    loadDelete(id: string): void\r\n}\r\ntype Props = StateProps & DispatchProps\r\n\r\nconst VaccineList: React.FunctionComponent<Props> = props => {\r\nconst [dataSource, setDataSource] = useState<Vaccine[]>([])\r\nconst { vaccine, loadDelete } = props;\r\n  // Component didmount => fetch API \r\n  useEffect(() => {\r\n    const {loadVaccine} = props;    \r\n    loadVaccine();        \r\n    if(vaccine)\r\n        setDataSource(vaccine)\r\n  }, [props.vaccine.length]) \r\n  // API Call to edit\r\n  const onEdit = (id: string): void => {\r\n    console.log('Edit record number', id)\r\n  \r\n  }\r\n\r\n  // API call to delete\r\n  const onDelete = (id: string): void => {\r\n    Modal.confirm({\r\n        title: 'Xóa Vắc-xin',\r\n        content: 'Bạn có muốn xóa Vắc-xin?',\r\n        okText: 'Vâng, xóa nó',\r\n        cancelText: 'Trở lại',\r\n        onOk: () => {\r\n          // Send Request to delete it \r\n          // Xóa trên state\r\n          const newDataSource = JSON.parse(JSON.stringify(vaccine))\r\n        const pos = vaccine.findIndex((t: Vaccine) => t.id == id)\r\n        newDataSource.splice(pos, 1)\r\n        setDataSource(newDataSource);\r\n        // gọi API xóa\r\n        // loadDelete(id);\r\n        },\r\n        onCancel: () => {\r\n          /* empty body */\r\n        },\r\n      })\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'ID',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n    },\r\n    {\r\n      title: 'Tên',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    },\r\n    {\r\n      title: 'Cho loại động vật',\r\n      dataIndex: 'raceType',\r\n      key: 'raceType',\r\n    },\r\n    {\r\n      title: 'Ngày tạo',\r\n      dataIndex: 'createdAt',\r\n      key: 'createdAt',\r\n    },\r\n    {\r\n      title: 'Action',\r\n      dataIndex: 'action',\r\n      key: 'action',\r\n      /* eslint-disable react/display-name */\r\n      render: (_: string, record: Vaccine): JSX.Element => {\r\n        return (\r\n          <React.Fragment>\r\n            <Button type=\"primary\" icon={<EditOutlined />} onClick={(): void => onEdit(record.id)}>\r\n              Sửa\r\n            </Button>{' '}\r\n            <Button type=\"link\"  onClick={(): void => onDelete(record.id)} style={{color: 'red'}}>\r\n              Xóa\r\n            </Button>\r\n          </React.Fragment>\r\n        )\r\n      },\r\n    },\r\n   \r\n  ]\r\n  \r\n\r\n\r\n   /**\r\n   * Update this code to show loading spinner when data is being fetched from\r\n   * API\r\n   */\r\n  const loading = false\r\n  \r\n    return (\r\n      <DashboardPageLayout>\r\n        <Content>\r\n        <div className=\"site-layout-background\" style={{}}>\r\n        <PageContent title=\"Danh sách Vắc-xin\" titleDivider>\r\n        {loading && (\r\n            <div style={{ textAlign: 'center' }}>\r\n              <LoadingOutlined />{' '}\r\n            </div>\r\n          )}\r\n          {!loading && <Table dataSource={dataSource} columns={columns} />}\r\n        </PageContent>\r\n        </div>\r\n        </Content>\r\n      </DashboardPageLayout>\r\n    )\r\n  }\r\n\r\n  const mapStateToProps = (state: ApplicationState) => ({\r\n    repositories: state.repositories.data,\r\n    vaccine: state.repositories.vaccine,\r\n    \r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(RepositoriesActions, dispatch);\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(VaccineList);\r\n","C:\\Users\\KhaiPham\\Desktop\\myweb\\src\\pages\\WikiList.tsx",["142","143","144","145","146","147","148"],"\r\nimport { useEffect, useState } from 'react'\r\n\r\nimport DashboardPageLayout from \"../layouts/DashBoardPageLayout\"\r\nimport {  Content, PageContent } from '../components/common'\r\nimport { EditOutlined, LoadingOutlined } from '@ant-design/icons'\r\nimport {  Wiki } from \"../store/ducks/repositories/types\"\r\nimport { Breadcrumb, Modal, Table, Tag, Button } from 'antd'\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch } from 'redux';\r\nimport { ApplicationState } from '../store';\r\nimport * as RepositoriesActions from '../store/ducks/repositories/actions';\r\nimport React from 'react'\r\n\r\n\r\ninterface StateProps {\r\n  wiki: Wiki[]\r\n  \r\n}\r\n\r\ninterface DispatchProps {\r\n    loadwiki(): void\r\n    loadDelete(id: string): void\r\n}\r\ntype Props = StateProps & DispatchProps\r\n\r\nconst WikiList: React.FunctionComponent<Props> = props => {\r\nconst [dataSource, setDataSource] = useState<Wiki[]>([])\r\nconst { wiki, loadDelete } = props;\r\n  // Component didmount => fetch API \r\n  useEffect(() => {\r\n    const {loadwiki} = props;\r\n    loadwiki();\r\n    if(wiki)\r\n    setDataSource(wiki)\r\n  }, [props.wiki?props.wiki.length:[]])\r\n\r\n  // API Call to edit\r\n  const onEdit = (id: string): void => {\r\n    console.log('Edit record number', id)\r\n  \r\n  }\r\n\r\n  // API call to delete\r\n  const onDelete = (id: string): void => {\r\n    Modal.confirm({\r\n        title: 'Xóa wiki',\r\n        content: 'Bạn có muốn xóa wiki?',\r\n        okText: 'Vâng, xóa nó',\r\n        cancelText: 'Trở lại',\r\n        onOk: () => {\r\n          // Send Request to delete it \r\n          // Xóa trên state\r\n        const newDataSource = JSON.parse(JSON.stringify(wiki))\r\n        const pos = wiki.findIndex((t: Wiki) => t.id == id)\r\n        newDataSource.splice(pos, 1)\r\n        setDataSource(newDataSource);\r\n        // gọi API xóa\r\n        // loadDelete(id);\r\n        },\r\n        onCancel: () => {\r\n          /* empty body */\r\n        },\r\n      })\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'ID',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n    },\r\n    {\r\n      title: 'Tiêu đề',\r\n      dataIndex: 'title',\r\n      key: 'title',\r\n    },\r\n    {\r\n        title: 'Hình ảnh',\r\n        dataIndex: 'image',\r\n        key: 'image',\r\n        render: (image: string) => {\r\n            return (\r\n              <img src={image} key={image} style={{width: 70, height: 70}}>\r\n              </img>\r\n            )\r\n        },\r\n      },\r\n    {\r\n      title: 'Ngày tạo',\r\n      dataIndex: 'createdAt',\r\n      key: 'createdAt',\r\n    },\r\n    {\r\n      title: 'Action',\r\n      dataIndex: 'action',\r\n      key: 'action',\r\n      /* eslint-disable react/display-name */\r\n      render: (_: string, record: Wiki): JSX.Element => {\r\n        return (\r\n          <React.Fragment>\r\n            <Button type=\"primary\" icon={<EditOutlined />} onClick={(): void => onEdit(record.id)}>\r\n              Sửa\r\n            </Button>{' '}\r\n            <Button type=\"link\"  onClick={(): void => onDelete(record.id)} style={{color: 'red'}}>\r\n              Xóa\r\n            </Button>\r\n          </React.Fragment>\r\n        )\r\n      },\r\n    },\r\n   \r\n  ]\r\n  \r\n  console.log(\"im out\",wiki);\r\n\r\n   /**\r\n   * Update this code to show loading spinner when data is being fetched from\r\n   * API\r\n   */\r\n  const loading = false\r\n  \r\n    return (\r\n      <DashboardPageLayout>\r\n        <Content>\r\n        <div className=\"site-layout-background\" style={{}}>\r\n        <PageContent title=\"Danh sách bài viết wiki\" titleDivider>\r\n        {loading && (\r\n            <div style={{ textAlign: 'center' }}>\r\n              <LoadingOutlined />{' '}\r\n            </div>\r\n          )}\r\n          {!loading && <Table dataSource={dataSource} columns={columns} />}\r\n        </PageContent>\r\n        </div>\r\n        </Content>\r\n      </DashboardPageLayout>\r\n    )\r\n  }\r\n\r\n  const mapStateToProps = (state: ApplicationState) => ({\r\n    repositories: state.repositories.data,\r\n    wiki: state.repositories.wiki,\r\n    \r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(RepositoriesActions, dispatch);\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(WikiList);\r\n",{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":2,"column":9,"nodeType":"155","messageId":"156","endLine":2,"endColumn":12},{"ruleId":"153","severity":1,"message":"157","line":5,"column":8,"nodeType":"155","messageId":"156","endLine":5,"endColumn":13},{"ruleId":"153","severity":1,"message":"158","line":4,"column":8,"nodeType":"155","messageId":"156","endLine":4,"endColumn":9},{"ruleId":"153","severity":1,"message":"159","line":8,"column":42,"nodeType":"155","messageId":"156","endLine":8,"endColumn":62},{"ruleId":"160","severity":1,"message":"161","line":27,"column":7,"nodeType":"162","endLine":27,"endColumn":87},{"ruleId":"153","severity":1,"message":"163","line":6,"column":10,"nodeType":"155","messageId":"156","endLine":6,"endColumn":22},{"ruleId":"153","severity":1,"message":"164","line":8,"column":10,"nodeType":"155","messageId":"156","endLine":8,"endColumn":20},{"ruleId":"153","severity":1,"message":"165","line":8,"column":22,"nodeType":"155","messageId":"156","endLine":8,"endColumn":27},{"ruleId":"153","severity":1,"message":"166","line":8,"column":36,"nodeType":"155","messageId":"156","endLine":8,"endColumn":39},{"ruleId":"153","severity":1,"message":"167","line":8,"column":41,"nodeType":"155","messageId":"156","endLine":8,"endColumn":47},{"ruleId":"168","severity":1,"message":"169","line":31,"column":6,"nodeType":"170","endLine":31,"endColumn":8,"suggestions":"171"},{"ruleId":"149","replacedBy":"172"},{"ruleId":"151","replacedBy":"173"},{"ruleId":"153","severity":1,"message":"163","line":6,"column":10,"nodeType":"155","messageId":"156","endLine":6,"endColumn":22},{"ruleId":"153","severity":1,"message":"164","line":8,"column":10,"nodeType":"155","messageId":"156","endLine":8,"endColumn":20},{"ruleId":"153","severity":1,"message":"165","line":8,"column":22,"nodeType":"155","messageId":"156","endLine":8,"endColumn":27},{"ruleId":"153","severity":1,"message":"166","line":8,"column":36,"nodeType":"155","messageId":"156","endLine":8,"endColumn":39},{"ruleId":"153","severity":1,"message":"167","line":8,"column":41,"nodeType":"155","messageId":"156","endLine":8,"endColumn":47},{"ruleId":"168","severity":1,"message":"169","line":31,"column":6,"nodeType":"170","endLine":31,"endColumn":8,"suggestions":"174"},{"ruleId":"160","severity":1,"message":"161","line":52,"column":13,"nodeType":"162","endLine":52,"endColumn":66},{"ruleId":"153","severity":1,"message":"163","line":6,"column":10,"nodeType":"155","messageId":"156","endLine":6,"endColumn":22},{"ruleId":"153","severity":1,"message":"164","line":8,"column":10,"nodeType":"155","messageId":"156","endLine":8,"endColumn":20},{"ruleId":"153","severity":1,"message":"165","line":8,"column":22,"nodeType":"155","messageId":"156","endLine":8,"endColumn":27},{"ruleId":"153","severity":1,"message":"166","line":8,"column":36,"nodeType":"155","messageId":"156","endLine":8,"endColumn":39},{"ruleId":"153","severity":1,"message":"167","line":8,"column":41,"nodeType":"155","messageId":"156","endLine":8,"endColumn":47},{"ruleId":"168","severity":1,"message":"169","line":31,"column":6,"nodeType":"170","endLine":31,"endColumn":8,"suggestions":"175"},{"ruleId":"160","severity":1,"message":"161","line":64,"column":15,"nodeType":"162","endLine":64,"endColumn":76},{"ruleId":"153","severity":1,"message":"164","line":8,"column":10,"nodeType":"155","messageId":"156","endLine":8,"endColumn":20},{"ruleId":"153","severity":1,"message":"166","line":8,"column":36,"nodeType":"155","messageId":"156","endLine":8,"endColumn":39},{"ruleId":"153","severity":1,"message":"176","line":31,"column":18,"nodeType":"155","messageId":"156","endLine":31,"endColumn":28},{"ruleId":"168","severity":1,"message":"177","line":38,"column":6,"nodeType":"170","endLine":38,"endColumn":28,"suggestions":"178"},{"ruleId":"179","severity":1,"message":"180","line":56,"column":60,"nodeType":"181","messageId":"182","endLine":56,"endColumn":62},{"ruleId":"153","severity":1,"message":"164","line":8,"column":10,"nodeType":"155","messageId":"156","endLine":8,"endColumn":20},{"ruleId":"153","severity":1,"message":"166","line":8,"column":36,"nodeType":"155","messageId":"156","endLine":8,"endColumn":39},{"ruleId":"153","severity":1,"message":"176","line":31,"column":15,"nodeType":"155","messageId":"156","endLine":31,"endColumn":25},{"ruleId":"168","severity":1,"message":"183","line":38,"column":6,"nodeType":"170","endLine":38,"endColumn":39,"suggestions":"184"},{"ruleId":"168","severity":1,"message":"185","line":38,"column":7,"nodeType":"186","endLine":38,"endColumn":38},{"ruleId":"179","severity":1,"message":"180","line":57,"column":54,"nodeType":"181","messageId":"182","endLine":57,"endColumn":56},{"ruleId":"160","severity":1,"message":"161","line":86,"column":15,"nodeType":"162","endLine":86,"endColumn":76},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"@typescript-eslint/no-unused-vars","'api' is defined but never used.","Identifier","unusedVar","'store' is defined but never used.","'_' is defined but never used.","'NotificationOutlined' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'EditOutlined' is defined but never used.","'Breadcrumb' is defined but never used.","'Modal' is defined but never used.","'Tag' is defined but never used.","'Button' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.","ArrayExpression",["189"],["187"],["188"],["190"],["191"],"'loadDelete' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props' and 'vaccine'. Either include them or remove the dependency array.",["192"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'props' and 'wiki'. Either include them or remove the dependency array.",["193"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","ConditionalExpression","no-global-assign","no-unsafe-negation",{"desc":"194","fix":"195"},{"desc":"194","fix":"196"},{"desc":"194","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},"Update the dependencies array to be: [props]",{"range":"202","text":"203"},{"range":"204","text":"203"},{"range":"205","text":"203"},"Update the dependencies array to be: [props, props.vaccine.length, vaccine]",{"range":"206","text":"207"},"Update the dependencies array to be: [props, wiki]",{"range":"208","text":"209"},[921,923],"[props]",[914,916],[910,912],[1152,1174],"[props, props.vaccine.length, vaccine]",[1104,1137],"[props, wiki]"]